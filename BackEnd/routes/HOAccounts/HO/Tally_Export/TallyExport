const tally_Export = require("express").Router();
const axios = require("axios");
const xml2js = require("xml2js");
// const cors = require('cors');
// const { dbco, dbco1, dbgetData, deleteUnitData, updateUnitData } = require("../../../helpers/dbconn")
const { setupQueryMod, misQuery } = require("../../../../helpers/dbconn");
const multer = require("multer");
const storage = multer.memoryStorage(); // Store file data in memory
const upload = multer({ storage: storage });

tally_Export.get("/getInvoiceData", (req, res) => {
  const date = req.query.date;
  const unit = req.query.selectedUnitName;
  console.log("unitttt", unit.UnitName);
  const sql = `SELECT u.*, t.voucher_type, t.PreFix, t.LedgerName
  FROM magod_hq_mis.tally_voucher_ref t
  JOIN magod_hq_mis.unit_invoices_list u
  ON t.inv_type = u.dc_invType
  WHERE u.UnitName='${unit.UnitName}' AND u.Inv_Date = '${date}'
  ORDER BY t.voucher_type, u.Inv_no;`;

  setupQueryMod(sql, (err, result) => {
    if (err) {
      console.log("error", err);
      return res.json({ Error: " error in sql" });
    } else {
      console.log(" INV ", result.length);
      return res.json({ Status: "Success", Result: result });
    }
  });
});

tally_Export.get("/getInvoiceTaxDetails", (req, res) => {
  const dcNo = req.query.DC_Inv_No;
  const unit = req.query.selectedUnitName;
  // console.log("dc no", dcNo);
  const sql = `SELECT m2.*, m2.Unit_Uid AS dc_invTaxId
    FROM magod_hq_mis.unit_invoices_list m1
    JOIN magod_hq_mis.unit_inv_taxtable m2
    ON m1.DC_inv_no = m2.DC_inv_no AND m1.UnitName = m2.UnitName
    WHERE m1.UnitName = '${unit.UnitName}'  AND m1.DC_Inv_No='${dcNo}';`;

  setupQueryMod(sql, (err, result) => {
    if (err) {
      console.log("error", err);
      return res.json({ Error: " error in sql" });
    } else {
      return res.json({ Status: "Success", Result: result });
    }
  });
});

tally_Export.get("/getInvoiceTaxDetailsForXML", (req, res) => {
  const unit = req.query.selectedUnitName;
  const date = req.query.selectedDate;
  // console.log("dc no", dcNo);
  const sql = `SELECT m2.*, m2.Unit_Uid AS dc_invTaxId
    FROM magod_hq_mis.unit_invoices_list m1
    JOIN magod_hq_mis.unit_inv_taxtable m2
    ON m1.DC_inv_no = m2.DC_inv_no AND m1.UnitName = m2.UnitName
    WHERE m1.UnitName = '${unit.UnitName}'  AND m1.Inv_Date='${date}' `;

  setupQueryMod(sql, (err, result) => {
    if (err) {
      console.log("error", err);
      return res.json({ Error: " error in sql" });
    } else {
      //  console.log(" TAX DATA invoice  FOR XML ", result.length);
      return res.json({ Status: "Success", Result: result });
    }
  });
});

tally_Export.get("/getPaymentReceipntData", (req, res) => {
  const date = req.query.date;
  const unit = req.query.selectedUnitName;

  const sql1 = `  SELECT  DISTINCT (p.Recd_PVNo), p.*
      FROM magod_hq_mis.unit_payment_recd_voucher_register p 
      JOIN magod_hq_mis.unit_payment_recd_voucher_details p1 ON p1.RecdPVID = p.RecdPVID  AND
      p1.UnitName = p.UnitName JOIN magod_hq_mis.tally_voucher_ref t ON t.inv_type = p1.Inv_Type
WHERE p.Unitname = '${unit.UnitName}' AND p.Recd_PV_Date = '${date}';      
     `;

  setupQueryMod(sql1, (err, result) => {
    //console.log("hiii, payment");
    if (err) {
      console.log("error", err);
      return res.json({ Error: " error in sql" });
    } else {
      console.log("paymnet recepts 2 tab", result.length);
      return res.json({ Status: "Success", Result: result });
    }
  });
});

tally_Export.get("/getPayment", (req, res) => {
  const Recd_PVNo = req.query.Recd_PVNo;
  const unit = req.query.selectedUnitName;
  // console.log("recd pvno", Recd_PVNo);

  const sql = `SELECT   p1.*, t.voucher_type, t.PreFix, t.LedgerName,p.Recd_PVNo
    FROM magod_hq_mis.unit_payment_recd_voucher_register p
    JOIN magod_hq_mis.unit_payment_recd_voucher_details p1 ON p1.RecdPVID = p.RecdPVID
    JOIN magod_hq_mis.tally_voucher_ref t ON t.inv_type = p1.Inv_Type
    WHERE p.Unitname = '${unit.UnitName}' AND p.Recd_PVNo='${Recd_PVNo}' AND p1.Unitname = '${unit.UnitName}' `;

  setupQueryMod(sql, (err, result) => {
    if (err) {
      console.log("error", err);
      return res.json({ Error: " error in sql" });
    } else {
      // console.log("paymnet", result);
      return res.json({ Status: "Success", Result: result });
    }
  });
});

tally_Export.get("/getPaymentForXml", (req, res) => {
  const unit = req.query.selectedUnitName;
  const date = req.query.date;
  console.log("date and unit", unit, date);

  const sql = `SELECT   p1.*, t.voucher_type, t.PreFix, t.LedgerName,p.Recd_PVNo
    FROM magod_hq_mis.unit_payment_recd_voucher_register p
    JOIN magod_hq_mis.unit_payment_recd_voucher_details p1 ON p1.RecdPVID = p.RecdPVID
    JOIN magod_hq_mis.tally_voucher_ref t ON t.inv_type = p1.Inv_Type
    WHERE p.Unitname = '${unit.UnitName}' AND p.Recd_PV_Date = '${date}' `;

  setupQueryMod(sql, (err, result) => {
    if (err) {
      console.log("error", err);
      return res.json({ Error: " error in sql" });
    } else {
      //  console.log("paymnetxmlll", result);
      return res.json({ Status: "Success", Result: result });
    }
  });
});

const { parseString } = require("xml2js");

const fs = require("fs");

tally_Export.post("/exporttally", async (req, res) => {
  const xmlData = req.body.xml;

  const tallyUrl = "http://localhost:9000";

  try {
    // Send XML data to Tally server
    const tallyResponse = await axios.post(tallyUrl, xmlData, {
      headers: {
        "Content-Type": "application/xml",
      },
    });

    console.log("Tally response data:", tallyResponse.data);

    // Extract values from Tally response
    const createdValue = parseInt(
      tallyResponse.data.match(/<CREATED>(\d+)<\/CREATED>/)?.[1] || "0"
    );
    const alteredValue = parseInt(
      tallyResponse.data.match(/<ALTERED>(\d+)<\/ALTERED>/)?.[1] || "0"
    );

    const exceptionValue = parseInt(
      tallyResponse.data.match(/<EXCEPTIONS>(\d+)<\/EXCEPTIONS>/)?.[1] || "0"
    );

    console.log(
      "Response Values:",
      "Altered:",
      alteredValue,
      "Exceptions:",
      exceptionValue,
      "createdValue",
      createdValue
    );
    if (createdValue !== 0) {
      console.log(" created export successfuly");
    } else if (alteredValue > 0) {
      // Extract GUIDs from the request XML
      const guidArray = [];
      const guidMatches = xmlData.match(/<GUID>(\d+)<\/GUID>/g);

      if (guidMatches) {
        // If GUIDs were altered, we push them
        guidMatches.forEach((guidMatch) => {
          const guid = guidMatch.match(/<GUID>(\d+)<\/GUID>/)[1]; // Extract GUID value
          guidArray.push(guid); // Push all GUIDs
        });
      }

      // Send the altered GUIDs to the frontend
      console.log("Altered GUIDs:", guidArray);
      res.json({ guids: guidArray });
    } else if (exceptionValue > 0) {
      // Handle exceptions case
      console.log("Exceptions found in response");
      res.status(200).json({
        message: "Exceptions found",
        exceptions: exceptionValue,
      });
    } else {
      // Handle cases where no GUIDs are altered
      console.log("No GUIDs altered");
      res.status(200).json({
        message: "No GUIDs altered",
      });
    }
  } catch (error) {
    if (error.code === "ECONNREFUSED") {
      // Tally server is not running or unavailable
      res.status(503).json({
        message: "Tally server is offline.",
      });
    } else {
      // Handle other errors
      console.error("Error exporting to Tally:", error);
      res.status(500).json({
        message: "An error occurred while exporting to Tally.",
      });
    }
  }
});

//get company from magod database
tally_Export.post("/getCompanyGuid", (req, res) => {
  const { selectedUnitName } = req.body;
  console.log("unit name for company", selectedUnitName);
  // const sql = `SELECT  Tally_account_Name, CurrentTallyAcctGUID FROM magod_setup.magodlaser_units where
  //   UnitName='${selectedUnitName}'`;
  const sql = `SELECT  Tally_account_Name FROM magod_setup.magodlaser_units where
    UnitName='${selectedUnitName}'`;
  //console.log("query",sql);
  setupQueryMod(sql, (err, result) => {
    //console.log("112123");
    if (err) {
      console.log("error", err);
      return res.json({ Error: " error in sql" });
    } else {
      //console.log(" company name and guid", result);
      return res.json({ Status: "Success", Result: result });
    }
  });
});

//get compnies from the tally software

tally_Export.post("/getCompanyFromTally", async (req, res) => {
  const tallyUrl = "http://localhost:9000";
  // const tallyUrl = "https://magodc01:9000";

  // const cm = req.body.cmp;
  const cm = "MLMPL_Jigani_2023_24";
  //console.log("cmp name separte", cm);

  // Fetch company Names
  console.log("get compny from tally");

  try {
    const response = await axios.post(tallyUrl, {
      body: "<ENVELOPE><HEADER><VERSION>1</VERSION><TALLYREQUEST>EXPORT</TALLYREQUEST><TYPE>COLLECTION</TYPE><ID>List of Companies</ID></HEADER><BODY><DESC><STATICVARIABLES><SVEXPORTFORMAT>$$SysName:XML</SVEXPORTFORMAT></STATICVARIABLES></DESC></BODY></ENVELOPE>",
    });
    parseString(response.data, (err, result) => {
      if (err) {
        console.error("Error parsing XML:", err);
        return;
      }
      const cmpny = result.ENVELOPE.BODY[0].DATA[0].COLLECTION[0].COMPANY;
      const companyNames = cmpny.map((company) => company.$.NAME);
      console.log("Company Names:", companyNames);
      const matchingCompanies = companyNames.filter((name) => name === cm);
      console.log("matched compnay", matchingCompanies);
      if (matchingCompanies.length === 0) {
        res.json({ company: "companyNot" });
        console.log("Match not found! .");
      } else {
        res.json({ company: "companyExist" });
        console.log("Match found! Sending message to frontend...");
      }
    });
  } catch (error) {
    console.error("Error fetching company names:");
    res.status(500).json({
      message: "Tally_server_off",
    });
  }
});

tally_Export.post("/exporttallyForPaymentReceipts", async (req, res) => {
  const xmlData = req.body.xml;
  //console.log("xml payment to tally", xmlData);

  const tallyUrl = "http://localhost:9000";

  try {
    const tallyServerUrl = "http://localhost:9000"; // Replace with your actual Tally server URL
    const tallyResponse = await axios.post(tallyServerUrl, xmlData, {
      headers: {
        "Content-Type": "application/xml",
      },
    });

    console.log("next step33", tallyResponse.data);
    const guidArray = [];

    const createdValue = parseInt(
      tallyResponse.data.match(/<CREATED>(\d+)<\/CREATED>/)[1]
    );

    const alteredvalue = parseInt(
      tallyResponse.data.match(/<ALTERED>(\d+)<\/ALTERED>/)[1]
    );

    const exceptionsValue = parseInt(
      tallyResponse.data.match(/<EXCEPTIONS>(\d+)<\/EXCEPTIONS>/)[1]
    );
    console.log(
      "print response ,",
      createdValue,
      alteredvalue,
      exceptionsValue
    );
    if (createdValue !== 0) {
      console.log(" created export successfuly");
    } else if (alteredvalue > 0) {
      // Extract GUIDs from the request XML
      const guidArray = [];
      const guidMatches = xmlData.match(/<GUID>(\d+)<\/GUID>/g);

      if (guidMatches) {
        // If GUIDs were altered, we push them
        guidMatches.forEach((guidMatch) => {
          const guid = guidMatch.match(/<GUID>(\d+)<\/GUID>/)[1]; // Extract GUID value
          guidArray.push(guid); // Push all GUIDs
        });
      }

      // Send the altered GUIDs to the frontend
      console.log("Altered GUIDs:", guidArray);
      res.json({ guids: guidArray });
    } else if (exceptionsValue > 0) {
      // Handle exceptions case
      console.log("Exceptions found in response");
      res.status(200).json({
        message: "Exceptions found",
        exceptions: exceptionsValue,
      });
    } else {
      // Handle cases where no GUIDs are altered
      console.log("No GUIDs altered");
      res.status(200).json({
        message: "No GUIDs altered",
      });
    }
  } catch (error) {
    console.error("Error handling file upload:", error);
    res.status(500).send("Internal Server Error");
  }
});

module.exports = tally_Export;
