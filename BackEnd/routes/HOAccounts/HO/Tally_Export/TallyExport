const tally_Export = require("express").Router();
const axios = require("axios");
const xml2js = require("xml2js");
// const cors = require('cors');
// const { dbco, dbco1, dbgetData, deleteUnitData, updateUnitData } = require("../../../helpers/dbconn")
const { setupQueryMod, misQuery } = require("../../../../helpers/dbconn");
const multer = require("multer");
const storage = multer.memoryStorage(); // Store file data in memory
const upload = multer({ storage: storage });

tally_Export.get("/getInvoiceData", (req, res) => {
  const date = req.query.date;
  const unit = req.query.selectedUnitName;
  console.log("unit", unit.UnitName);
  const sql = `SELECT u.*, t.voucher_type, t.PreFix, t.LedgerName
  FROM magod_hq_mis.tally_voucher_ref t
  JOIN magod_hq_mis.unit_invoices_list u
  ON t.inv_type = u.dc_invType
  WHERE u.UnitName='AHANA' AND u.Inv_Date = '${date}'
  ORDER BY t.voucher_type, u.Inv_no;`;

  // const sql = ` SELECT u.BillType,u.DC_InvType, u.Inv_No, u.Cust_Name, u.GrandTotal,u.PO_No,u.TallyRef,u.Cust_Code,u.DC_No,u.Inv_Date,
  //  u.Cust_place,u.Net_Total,u.Cust_state,u.PIN_Code, u.AssessableValue, u.Cust_address,u.TaxAmount,u.InvTotal,u.Round_Off,
  //   u.DC_Inv_No,u.OrderNo,
  //   t.voucher_type, t.PreFix, t.LedgerName
  //   FROM magod_hq_mis.tally_voucher_ref t
  //   JOIN magod_hq_mis.unit_invoices_list u
  //   ON t.inv_type = u.dc_invType
  //   WHERE u.UnitName='${unit.UnitName}' AND u.Inv_Date = '${date}'
  //   ORDER BY t.voucher_type, u.Inv_no;`;

  // if (!date || !isValidDateFormat(date)) {
  //   console.log("Please provide a valid date in the format YYYY-MM-DD.");
  // }

  setupQueryMod(sql, (err, result) => {
    if (err) {
      console.log("error", err);
      return res.json({ Error: " error in sql" });
    } else {
      console.log(" INV ", result.length);
      return res.json({ Status: "Success", Result: result });
    }
  });
});

tally_Export.get("/getInvoiceTaxDetails", (req, res) => {
  const dcNo = req.query.DC_Inv_No;
  const unit = req.query.selectedUnitName;
  // console.log("dc no", dcNo);
  const sql = `SELECT m2.*, m2.Unit_Uid AS dc_invTaxId
    FROM magod_hq_mis.unit_invoices_list m1
    JOIN magod_hq_mis.unit_inv_taxtable m2
    ON m1.DC_inv_no = m2.DC_inv_no AND m1.UnitName = m2.UnitName
    WHERE m1.UnitName = '${unit.UnitName}'  AND m1.DC_Inv_No='${dcNo}';`;

  setupQueryMod(sql, (err, result) => {
    if (err) {
      console.log("error", err);
      return res.json({ Error: " error in sql" });
    } else {
      return res.json({ Status: "Success", Result: result });
    }
  });
});

tally_Export.get("/getInvoiceTaxDetailsForXML", (req, res) => {
  const unit = req.query.selectedUnitName;
  const date = req.query.selectedDate;
  // console.log("dc no", dcNo);
  const sql = `SELECT m2.*, m2.Unit_Uid AS dc_invTaxId
    FROM magod_hq_mis.unit_invoices_list m1
    JOIN magod_hq_mis.unit_inv_taxtable m2
    ON m1.DC_inv_no = m2.DC_inv_no AND m1.UnitName = m2.UnitName
    WHERE m1.UnitName = '${unit.UnitName}'  AND m1.Inv_Date='${date}' `;

  setupQueryMod(sql, (err, result) => {
    if (err) {
      console.log("error", err);
      return res.json({ Error: " error in sql" });
    } else {
      //  console.log(" TAX DATA invoice  FOR XML ", result.length);
      return res.json({ Status: "Success", Result: result });
    }
  });
});

tally_Export.get("/getPaymentReceipntData", (req, res) => {
  const date = req.query.date;
  const unit = req.query.selectedUnitName;

  const sql1 = `  SELECT  DISTINCT (p.Recd_PVNo), p.*
      FROM magod_hq_mis.unit_payment_recd_voucher_register p 
      JOIN magod_hq_mis.unit_payment_recd_voucher_details p1 ON p1.RecdPVID = p.RecdPVID  AND
      p1.UnitName = p.UnitName JOIN magod_hq_mis.tally_voucher_ref t ON t.inv_type = p1.Inv_Type
WHERE p.Unitname = '${unit.UnitName}' AND p.Recd_PV_Date = '${date}';      
     `;

  setupQueryMod(sql1, (err, result) => {
    //console.log("hiii, payment");
    if (err) {
      console.log("error", err);
      return res.json({ Error: " error in sql" });
    } else {
      console.log("paymnet recepts 2 tab", result.length);
      return res.json({ Status: "Success", Result: result });
    }
  });
});

tally_Export.get("/getPayment", (req, res) => {
  const Recd_PVNo = req.query.Recd_PVNo;
  const unit = req.query.selectedUnitName;
  // console.log("recd pvno", Recd_PVNo);

  const sql = `SELECT   p1.*, t.voucher_type, t.PreFix, t.LedgerName,p.Recd_PVNo
    FROM magod_hq_mis.unit_payment_recd_voucher_register p
    JOIN magod_hq_mis.unit_payment_recd_voucher_details p1 ON p1.RecdPVID = p.RecdPVID
    JOIN magod_hq_mis.tally_voucher_ref t ON t.inv_type = p1.Inv_Type
    WHERE p.Unitname = '${unit.UnitName}' AND p.Recd_PVNo='${Recd_PVNo}' AND p1.Unitname = '${unit.UnitName}' `;

  setupQueryMod(sql, (err, result) => {
    if (err) {
      console.log("error", err);
      return res.json({ Error: " error in sql" });
    } else {
      // console.log("paymnet", result);
      return res.json({ Status: "Success", Result: result });
    }
  });
});

tally_Export.get("/getPaymentForXml", (req, res) => {
  const unit = req.query.selectedUnitName;
  const date = req.query.date;
  console.log("date and unit", unit, date);

  const sql = `SELECT   p1.*, t.voucher_type, t.PreFix, t.LedgerName,p.Recd_PVNo
    FROM magod_hq_mis.unit_payment_recd_voucher_register p
    JOIN magod_hq_mis.unit_payment_recd_voucher_details p1 ON p1.RecdPVID = p.RecdPVID
    JOIN magod_hq_mis.tally_voucher_ref t ON t.inv_type = p1.Inv_Type
    WHERE p.Unitname = '${unit.UnitName}' AND p.Recd_PV_Date = '${date}' `;

  setupQueryMod(sql, (err, result) => {
    if (err) {
      console.log("error", err);
      return res.json({ Error: " error in sql" });
    } else {
      //  console.log("paymnetxmlll", result);
      return res.json({ Status: "Success", Result: result });
    }
  });
});

const { parseString } = require("xml2js");
//tally after exporting i need to compre which ledger is not export

// tally_Export.post('/exporttally', upload.single('xmlFile'), async (req, res) => {

//     const tallyUrl = 'http://localhost:9000';

//     // Fetch company Names
//     console.log("hoiooooooooooo");

//     try {
//         const response = await axios.post(tallyUrl, {
//             xmlRequest: '<ENVELOPE><HEADER><VERSION>1</VERSION><TALLYREQUEST>EXPORT</TALLYREQUEST><TYPE>COLLECTION</TYPE><ID>List of Ledgers</ID></HEADER><BODY><DESC><STATICVARIABLES><SVEXPORTFORMAT>$$SysName:XML</SVEXPORTFORMAT></STATICVARIABLES></DESC></BODY></ENVELOPE>'
//         });
//         // Process response XML here
//         // console.log("tally .......",response.data);
//         const xmlData = response.data;
//         console.log("hoiooooooooooo22222");
//          parseString(xmlData, (err, result) => {
//             if (err) {
//               console.error("Error parsing XML:", err);
//               return;
//             }
//             const ledgerElements = result.ENVELOPE.BODY[0].DATA[0].COLLECTION[0].LEDGER;
//             const ledgerNames = ledgerElements.map(ledger => ledger.$.NAME);
//             if (ledgerNames.length > 0) {
//               console.log("Ledger Names:");
//               ledgerNames.forEach(name => console.log(name));
//             } else {
//               console.log("No ledger names found in the XML data.");
//             }
//           });
//     } catch (error) {
//         console.error('Error fetching ledger names:', error);
//     }

//     try {
//         const xmlFile = `<ENVELOPE>
//         <HEADER>
//             <TALLYREQUEST>Import Data</TALLYREQUEST>
//             </HEADER>
//         <BODY>
//         <IMPORTDATA>
//         <REQUESTDESC>
//         <REPORTNAME>Vouchers</REPORTNAME>
//         <STATICVARIABLES><SVCURRENTCOMPANY>MLMPL_Jigani_2023_24</SVCURRENTCOMPANY></STATICVARIABLES>
//         </REQUESTDESC>
//         <TALLYMESSAGE xmlns:UDF='TallyUDF'>
//         <VOUCHER REMOTEID='SL2147387061' VCHTYPE='Sales' ACTION='Create'>
//         <DATE>20240316</DATE>
//         <GUID>2147387061</GUID>
//         <NARRATION>Our WO No :240492 Packing Note No :09014/ 23/24</NARRATION>
//         <VOUCHERTYPENAME>Job Work</VOUCHERTYPENAME>
//         <VOUCHERNUMBER>SL / JG1133/ 23/24</VOUCHERNUMBER>
//         <REFERENCE>KE034 DTD/31.01.2024</REFERENCE>
//         <PARTYLEDGERNAME>SULAX TECHNOLOGIES PRIVATE LIMITED</PARTYLEDGERNAME>
//         <CSTFORMISSUETYPE />
//         <CSTFORMRECVTYPE />
//         <FBTPAYMENTTYPE>Default</FBTPAYMENTTYPE>
//         <VCHGSTCLASS />
//         <DIFFACTUALQTY>No</DIFFACTUALQTY>
//         <AUDITED>No</AUDITED>
//         <FORJOBCOSTING>No</FORJOBCOSTING>
//         <ISOPTIONAL>No</ISOPTIONAL>
//         <EFFECTIVEDATE>20240316</EFFECTIVEDATE>
//         <USEFORINTEREST>No</USEFORINTEREST>
//         <USEFORGAINLOSS>No</USEFORGAINLOSS>
//         <USEFORGODOWNTRANSFER>No</USEFORGODOWNTRANSFER>
//         <USEFORCOMPOUND>No</USEFORCOMPOUND>
//         <ALTERID>2</ALTERID>
//         <EXCISEOPENING>No</EXCISEOPENING>
//         <ISCANCELLED>No</ISCANCELLED>
//         <HASCASHFLOW>No</HASCASHFLOW>
//         <ISPOSTDATED>No</ISPOSTDATED>
//         <USETRACKINGNUMBER>No</USETRACKINGNUMBER>
//         <ISINVOICE>No</ISINVOICE>
//         <MFGJOURNAL>No</MFGJOURNAL>
//         <HASDISCOUNTS>No</HASDISCOUNTS>
//         <ASPAYSLIP>No</ASPAYSLIP>
//         <ISDELETED>No</ISDELETED>
//         <ASORIGINAL>No</ASORIGINAL>
//         <ALLLEDGERENTRIES.LIST>
//         <LEDGERNAME>SULAX TECHNOLOGIES PRIVATE LIMITED</LEDGERNAME>
//         <GSTCLASS />
//         <ISDEEMEDPOSITIVE>YES</ISDEEMEDPOSITIVE>
//         <LEDGERFROMITEM>No</LEDGERFROMITEM>
//         <REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>
//         <ISPARTYLEDGER>Yes</ISPARTYLEDGER>
//         <AMOUNT>-26143.00</AMOUNT>
//         <BILLALLOCATIONS.LIST>
//         <NAME>SL / JG1133/ 23/24</NAME>
//         <BILLCREDITPERIOD>30</BILLCREDITPERIOD>
//         <BILLTYPE>New Ref</BILLTYPE>
//         <AMOUNT>-26143.00</AMOUNT>
//         </BILLALLOCATIONS.LIST>
//         </ALLLEDGERENTRIES.LIST>
//         <ALLLEDGERENTRIES.LIST>
// <LEDGERNAME>CGST @ 9%</LEDGERNAME>
// <GSTCLASS />
// <ISDEEMEDPOSITIVE>No</ISDEEMEDPOSITIVE>
// <LEDGERFROMITEM>No</LEDGERFROMITEM>
// <REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>
// <ISPARTYLEDGER>No</ISPARTYLEDGER>
// <AMOUNT>1993.95</AMOUNT>
// </ALLLEDGERENTRIES.LIST>
//         <ALLLEDGERENTRIES.LIST>
//         <LEDGERNAME>SALES</LEDGERNAME>
//         <GSTCLASS />
//         <ISDEEMEDPOSITIVE>No</ISDEEMEDPOSITIVE>
//         <LEDGERFROMITEM>No</LEDGERFROMITEM>
//         <REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>
//         <ISPARTYLEDGER>No</ISPARTYLEDGER>
//         <AMOUNT>22155.00</AMOUNT>
//         </ALLLEDGERENTRIES.LIST>
//         <ALLLEDGERENTRIES.LIST>
//         <LEDGERNAME>SGST @ 9%</LEDGERNAME>
//         <GSTCLASS />
//         <ISDEEMEDPOSITIVE>No</ISDEEMEDPOSITIVE>
//         <LEDGERFROMITEM>No</LEDGERFROMITEM>
//         <REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>
//         <ISPARTYLEDGER>Yes</ISPARTYLEDGER>
//         <AMOUNT>1993.95</AMOUNT>
//         </ALLLEDGERENTRIES.LIST>
//         <ALLLEDGERENTRIES.LIST>
//         <LEDGERNAME>Round Off</LEDGERNAME>
//         <GSTCLASS />
//         <ISDEEMEDPOSITIVE>Yes</ISDEEMEDPOSITIVE>
//         <LEDGERFROMITEM>No</LEDGERFROMITEM>
//         <REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>
//         <ISPARTYLEDGER>Yes</ISPARTYLEDGER>
//         <AMOUNT>0.10</AMOUNT>
//         </ALLLEDGERENTRIES.LIST>
//         </VOUCHER>
//         </TALLYMESSAGE>
//         </IMPORTDATA>
//         </BODY>
//         </ENVELOPE>
//         `// Your XML data

//         const tallyServerUrl = 'http://localhost:9000'; // Replace with your actual Tally server URL
//         const tallyResponse = await axios.post(tallyServerUrl, xmlFile, {
//             headers: {
//                 'Content-Type': 'application/xml',
//             },
//         });

//         if (tallyResponse.status === 200) {

//             // Tally server responded with a success status
//            // console.log('tally response ', tallyResponse.data);
//             res.status(200).send('File uploaded and sent to Tally successfully');
//         }
//         else {
//             // Tally server responded with an error status
//             console.error('Error from Tally server:', tallyResponse.statusText);
//             res.status(500).send('Error communicating with Tally server');
//         }

//     } catch (error) {
//         console.error('Error handling file upload:', error);
//         res.status(500).send('Internal Server Error');
//     }
// });

const fs = require("fs");

tally_Export.post("/exporttally", async (req, res) => {
  const cleanedXml = req.body.xml.replace(/\n/g, "");

  const xmlData = req.body.xml;
  //console.log("xml daata", xmlData, "----------------");
  const tallyUrl = "http://localhost:9000";

  //check company is exist or not
  // try {
  //   const response = await axios.post(tallyUrl, {
  //     body: "<ENVELOPE><HEADER><VERSION>1</VERSION><TALLYREQUEST>EXPORT</TALLYREQUEST><TYPE>COLLECTION</TYPE><ID>List of Companies</ID></HEADER><BODY><DESC><STATICVARIABLES><SVEXPORTFORMAT>$$SysName:XML</SVEXPORTFORMAT></STATICVARIABLES></DESC></BODY></ENVELOPE>",
  //   });
  //   parseString(response.data, (err, result) => {
  //     if (err) {
  //       console.error("Error parsing XML:", err);
  //       return;
  //     }
  //     const cmpny = result.ENVELOPE.BODY[0].DATA[0].COLLECTION[0].COMPANY;
  //     const companyNames = cmpny.map((company) => company.$.NAME);
  //     console.log("Company Names:", companyNames);

  //     const matchingCompanies = companyNames.filter((name) => name === cmpname);
  //     console.log("matched compnay", matchingCompanies);
  //     if (matchingCompanies.length === 0) {
  //       res.json({ company: "companyNot" });
  //       console.log("Match not found! .");
  //     } else {
  //       console.log("Match found! Sending message to frontend...");
  //     }
  //   });
  // } catch (error) {
  //   console.error("Error fetching company names:", error);
  // }

  const xml11 = ` <ENVELOPE>
  <HEADER><TALLYREQUEST>Import Data</TALLYREQUEST></HEADER>
  <BODY>
    <IMPORTDATA>
      <REQUESTDESC>
        <REPORTNAME>Vouchers</REPORTNAME>
        <STATICVARIABLES><SVCURRENTCOMPANY>MLMPL_Jigani_2023_24</SVCURRENTCOMPANY> </STATICVARIABLES>
      </REQUESTDESC>
      <TALLYMESSAGE xmlns:UDF='TallyUDF'>
        <VOUCHER REMOTEID='SL2147323822' VCHTYPE='Sales' ACTION='Create'>
          <DATE>20240402</DATE>
          <GUID>2147323822</GUID>
          <NARRATION>Our WO No: 176870 Packing Note No: 06777/ 23/24</NARRATION>
          <VOUCHERTYPENAME>Sales</VOUCHERTYPENAME>
          <VOUCHERNUMBER>SL /JG0475 / 24/25</VOUCHERNUMBER>
          <REFERENCE>17/01306 DT-09/04/2024</REFERENCE>
          <PARTYLEDGERNAME>SULAX TECHNOLOGIES PRIVATE LIMITED</PARTYLEDGERNAME>
          <CSTFORMISSUETYPE/>
          <CSTFORMRECVTYPE/>
          <FBTPAYMENTTYPE>Default</FBTPAYMENTTYPE>
          <VCHGSTCLASS />
          <DIFFACTUALQTY>No</DIFFACTUALQTY>
          <AUDITED>No</AUDITED>
          <FORJOBCOSTING>No</FORJOBCOSTING>
          <ISOPTIONAL>No</ISOPTIONAL>
          <EFFECTIVEDATE>20240402</EFFECTIVEDATE>
          <USEFORINTEREST>No</USEFORINTEREST>
          <USEFORGAINLOSS>No</USEFORGAINLOSS>
          <USEFORGODOWNTRANSFER>No</USEFORGODOWNTRANSFER>
          <USEFORCOMPOUND>No</USEFORCOMPOUND>
          <ALTERID>2</ALTERID>
          <EXCISEOPENING>No</EXCISEOPENING>
          <ISCANCELLED>No</ISCANCELLED>
          <HASCASHFLOW>No</HASCASHFLOW>
          <ISPOSTDATED>No</ISPOSTDATED>
          <USETRACKINGNUMBER>No</USETRACKINGNUMBER>
          <ISINVOICE>No</ISINVOICE>
          <MFGJOURNAL>No</MFGJOURNAL>
          <HASDISCOUNTS>No</HASDISCOUNTS>
          <ASPAYSLIP>No</ASPAYSLIP>
          <ISDELETED>No</ISDELETED>
          <ASORIGINAL>No</ASORIGINAL>
          <ALLLEDGERENTRIES.LIST>
            <LEDGERNAME>SULAX TECHNOLOGIES PRIVATE LIMITED</LEDGERNAME>
            <GSTCLASS />
            <ISDEEMEDPOSITIVE>YES</ISDEEMEDPOSITIVE>
            <LEDGERFROMITEM>No</LEDGERFROMITEM>
            <REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>
            <ISPARTYLEDGER>Yes</ISPARTYLEDGER>
            <AMOUNT>-336317.00</AMOUNT>
            <BILLALLOCATIONS.LIST>
              <NAME>SL /JG0475 / 24/25</NAME>
              <BILLCREDITPERIOD>60</BILLCREDITPERIOD>
              <BILLTYPE>New Ref</BILLTYPE>
              <AMOUNT>-336317.00</AMOUNT>
            </BILLALLOCATIONS.LIST>
          </ALLLEDGERENTRIES.LIST>
          <ALLLEDGERENTRIES.LIST>
            <LEDGERNAME>SALES</LEDGERNAME>
            <GSTCLASS />
            <ISDEEMEDPOSITIVE>NO</ISDEEMEDPOSITIVE>
            <LEDGERFROMITEM>No</LEDGERFROMITEM>
            <REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>
            <ISPARTYLEDGER>Yes</ISPARTYLEDGER>
            <AMOUNT>285014.50</AMOUNT>
          </ALLLEDGERENTRIES.LIST>
          <ALLLEDGERENTRIES.LIST>
            <LEDGERNAME>SGST @ 9%</LEDGERNAME>
            <GSTCLASS />
            <ISDEEMEDPOSITIVE>NO</ISDEEMEDPOSITIVE>
            <LEDGERFROMITEM>No</LEDGERFROMITEM>
            <REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>
            <ISPARTYLEDGER>Yes</ISPARTYLEDGER>
            <AMOUNT>25651.30</AMOUNT>
          </ALLLEDGERENTRIES.LIST>
          <ALLLEDGERENTRIES.LIST>
            <LEDGERNAME>CGST @ 9%</LEDGERNAME>
            <GSTCLASS />
            <ISDEEMEDPOSITIVE>NO</ISDEEMEDPOSITIVE>
            <LEDGERFROMITEM>No</LEDGERFROMITEM>
            <REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>
            <ISPARTYLEDGER>Yes</ISPARTYLEDGER>
            <AMOUNT>25651.30</AMOUNT>
          </ALLLEDGERENTRIES.LIST>
          <ALLLEDGERENTRIES.LIST>
            <LEDGERNAME>Round Off</LEDGERNAME>
            <GSTCLASS />
            <ISDEEMEDPOSITIVE>Yes</ISDEEMEDPOSITIVE>
            <LEDGERFROMITEM>No</LEDGERFROMITEM>
            <REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>
            <ISPARTYLEDGER>Yes</ISPARTYLEDGER>
            <AMOUNT>-0.10</AMOUNT>
          </ALLLEDGERENTRIES.LIST>
        </VOUCHER>
      </TALLYMESSAGE>
    </IMPORTDATA>
  </BODY>
</ENVELOPE>`;

  //sending the .xml file to tally not xml format

  // Write the XML data to a file
  // fs.writeFileSync("exportedData.xml", xmlData);

  // Read the XML file
  //const xmlFileToTally = fs.readFileSync("exportedData.xml");

  try {
    const tallyServerUrl = "http://localhost:9000"; // Replace with your actual Tally server URL
    const tallyResponse = await axios.post(tallyServerUrl, xml11, {
      headers: {
        "Content-Type": "application/xml",
      },
    });

    console.log("next step33", tallyResponse.data);
    const guidArray = [];

    const createdValue = parseInt(
      tallyResponse.data.match(/<CREATED>(\d+)<\/CREATED>/)[1]
    );

    const alteredvalue = parseInt(
      tallyResponse.data.match(/<ALTERED>(\d+)<\/ALTERED>/)[1]
    );

    const exceptionsValue = parseInt(
      tallyResponse.data.match(/<EXCEPTIONS>(\d+)<\/EXCEPTIONS>/)[1]
    );
    console.log(
      "print response ,",
      createdValue,
      alteredvalue,
      exceptionsValue
    );
    if (createdValue === 1) {
      // If createdValue is 1, indicating success
      // res.status(200).json({
      //     message: 'File uploaded and created in Tally successfully',
      //     tallyData: tallyResponse.data // Send the Tally response data to the frontend
      // });
      console.log(" created export successfuly");
    } else if (alteredvalue === 1) {
      console.log("alterd already exist");
      const guidMatch = xml11.match(/<GUID>(\d+)<\/GUID>/);
      // console.log("guid ", guidMatch);
      if (guidMatch) {
        const guid = guidMatch[1];
        guidArray.push(guid);
        console.log(
          `GUID ${guid} was not exported to Tally due to an exception`
        );
        res.json({ guids: guidArray });
      }
    } else if (exceptionsValue === 1) {
      console.log("exceptions ===1");
    } else {
      console.log(" exception");
      res.status(200).json({
        message: "Exception",
        // Send the Tally response data to the frontend
      });
    }
  } catch (error) {
    console.error("Error handling file upload:", error);
    res.status(500).send("Internal Server Error");
  }
});

//get company from magod database
tally_Export.post("/getCompanyGuid", (req, res) => {
  const { selectedUnitName } = req.body;
  console.log("unit name for company", selectedUnitName);
  // const sql = `SELECT  Tally_account_Name, CurrentTallyAcctGUID FROM magod_setup.magodlaser_units where
  //   UnitName='${selectedUnitName}'`;
  const sql = `SELECT  Tally_account_Name FROM magod_setup.magodlaser_units where
    UnitName='${selectedUnitName}'`;
  //console.log("query",sql);
  setupQueryMod(sql, (err, result) => {
    //console.log("112123");
    if (err) {
      console.log("error", err);
      return res.json({ Error: " error in sql" });
    } else {
      //console.log(" company name and guid", result);
      return res.json({ Status: "Success", Result: result });
    }
  });
});

//get compnies from the tally software

tally_Export.post("/getCompanyFromTally", async (req, res) => {
  const tallyUrl = "http://localhost:9000";
  // const tallyUrl = "https://magodc01:9000";

  const cm = req.body.cmp;
  //const cm = "MLMPL_Jigani_2023_24";
  console.log("cmp name separte", cm);

  // Fetch company Names
  console.log("get compny from tally");

  try {
    const response = await axios.post(tallyUrl, {
      body: "<ENVELOPE><HEADER><VERSION>1</VERSION><TALLYREQUEST>EXPORT</TALLYREQUEST><TYPE>COLLECTION</TYPE><ID>List of Companies</ID></HEADER><BODY><DESC><STATICVARIABLES><SVEXPORTFORMAT>$$SysName:XML</SVEXPORTFORMAT></STATICVARIABLES></DESC></BODY></ENVELOPE>",
    });
    parseString(response.data, (err, result) => {
      if (err) {
        console.error("Error parsing XML:", err);
        return;
      }
      const cmpny = result.ENVELOPE.BODY[0].DATA[0].COLLECTION[0].COMPANY;
      const companyNames = cmpny.map((company) => company.$.NAME);
      console.log("Company Names:", companyNames);
      const matchingCompanies = companyNames.filter((name) => name === cm);
      console.log("matched compnay", matchingCompanies);
      if (matchingCompanies.length === 0) {
        res.json({ company: "companyNot" });
        console.log("Match not found! .");
      } else {
        res.json({ company: "companyExist" });
        console.log("Match found! Sending message to frontend...");
      }
    });
  } catch (error) {
    console.error("Error fetching company names:", error);
  }
});

// try to getting GUID from tally
// tally_Export.post("/getCompanyFromTally", async (req, res) => {
//   const tallyUrl = "http://localhost:9000";

//   // const cm = req.body.cmp;
//   const cm = "MLMPL_Jigani_2023_24";
//   console.log("cmp name separte", cm);

//   const response = await axios.post(tallyUrl, {
//     body: `<ENVELOPE>
//   <HEADER>
//     <VERSION>1</VERSION>
//     <TALLYREQUEST>EXPORT</TALLYREQUEST>
//     <TYPE>COLLECTION</TYPE>
//     <ID>List of Companies</ID>
//   </HEADER>
//   <BODY>
//     <DESC>
//       <STATICVARIABLES>
//         <SVEXPORTFORMAT>$$SysName:XML</SVEXPORTFORMAT>
//       </STATICVARIABLES>
//     </DESC>
//   </BODY>
// </ENVELOPE>`,
//   });
//   console.log("response from tally", response.data);
//   parseString(response.data, (err, result) => {
//     if (err) {
//       console.error("Error parsing XML:", err);
//       return;
//     }
//     const cmpny = result.ENVELOPE.BODY[0].DATA[0].COLLECTION[0].COMPANY;
//     const companyNames = cmpny.map((company) => company.$.NAME);
//     console.log("Company Names:", companyNames);
//   });
// });

//tally export for payment receipts

tally_Export.post("/exporttallyForPaymentReceipts", async (req, res) => {
  const xmlData = req.body.xml;
  //console.log("xml payment to tally", xmlData);

  const tallyUrl = "http://localhost:9000";

  const paymentReceiptXML = `<ENVELOPE>
  <HEADER>
    <TALLYREQUEST>Import Data</TALLYREQUEST>
  </HEADER>
  <BODY>
    <IMPORTDATA>
      <REQUESTDESC>
        <REPORTNAME>Vouchers</REPORTNAME>
        <STATICVARIABLES>
          <SVCURRENTCOMPANY>MLMPL_Jigani_2023_24</SVCURRENTCOMPANY>
        </STATICVARIABLES>
      </REQUESTDESC>
      <TALLYMESSAGE xmlns:UDF="TallyUDF">
        <VOUCHER REMOTEID="RV51393" VCHTYPE="PAYMENT RECEIPT" ACTION="Create">
          <DATE>20240201</DATE>
          <GUID>51393</GUID>
          <NARRATION>RTGS Payment DTD: 25/11/2023 (Recd Dt: 27/11/2023)</NARRATION>
          <VOUCHERTYPENAME>PAYMENT RECEIPT</VOUCHERTYPENAME>
          <VOUCHERNUMBER>23/24 / 3937</VOUCHERNUMBER>
          <PARTYLEDGERNAME>SULAX TECHNOLOGIES PRIVATE LIMITED</PARTYLEDGERNAME>
          <CSTFORMISSUETYPE/>
          <CSTFORMRECVTYPE/>
          <FBTPAYMENTTYPE>Default</FBTPAYMENTTYPE>
          <DIFFACTUALQTY>No</DIFFACTUALQTY>
          <AUDITED>No</AUDITED>
          <FORJOBCOSTING>No</FORJOBCOSTING>
          <ISOPTIONAL>No</ISOPTIONAL>
          <EFFECTIVEDATE>20240201</EFFECTIVEDATE>
          <USEFORINTEREST>No</USEFORINTEREST>
          <USEFORGAINLOSS>No</USEFORGAINLOSS>
          <USEFORGODOWNTRANSFER>No</USEFORGODOWNTRANSFER>
          <USEFORCOMPOUND>No</USEFORCOMPOUND>
          <ALTERID>51393</ALTERID>
          <EXCISEOPENING>No</EXCISEOPENING>
          <ISCANCELLED>No</ISCANCELLED>
          <HASCASHFLOW>No</HASCASHFLOW>
          <ISPOSTDATED>No</ISPOSTDATED>
          <USETRACKINGNUMBER>No</USETRACKINGNUMBER>
          <ISINVOICE>No</ISINVOICE>
          <MFGJOURNAL>No</MFGJOURNAL>
          <HASDISCOUNTS>No</HASDISCOUNTS>
          <ASPAYSLIP>No</ASPAYSLIP>
          <ISDELETED>No</ISDELETED>
          <ASORIGINAL>No</ASORIGINAL>
          <ALLLEDGERENTRIES.LIST>
            <LEDGERNAME>SULAX TECHNOLOGIES PRIVATE LIMITED</LEDGERNAME>
            <GSTCLASS/>
            <ISDEEMEDPOSITIVE>Yes</ISDEEMEDPOSITIVE>
            <LEDGERFROMITEM>No</LEDGERFROMITEM>
            <REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>
            <ISPARTYLEDGER>Yes</ISPARTYLEDGER>
            <AMOUNT>118789.00</AMOUNT>
            <BILLALLOCATIONS.LIST>
              <NAME>SR / JS3991 / 23/24</NAME>
              <BILLTYPE>Agst Ref</BILLTYPE>
              <AMOUNT>15301.00</AMOUNT>
            </BILLALLOCATIONS.LIST>
            <BILLALLOCATIONS.LIST>
              <NAME>SR / JS4028 / 23/24</NAME>
              <BILLTYPE>Agst Ref</BILLTYPE>
              <AMOUNT>23667.00</AMOUNT>
            </BILLALLOCATIONS.LIST>
            <BILLALLOCATIONS.LIST>
              <NAME>SR / JS4071 / 23/24</NAME>
              <BILLTYPE>Agst Ref</BILLTYPE>
              <AMOUNT>20262.00</AMOUNT>
            </BILLALLOCATIONS.LIST>
            <BILLALLOCATIONS.LIST>
              <NAME>SR / JS4097 / 23/24</NAME>
              <BILLTYPE>Agst Ref</BILLTYPE>
              <AMOUNT>14514.00</AMOUNT>
            </BILLALLOCATIONS.LIST>
            <BILLALLOCATIONS.LIST>
              <NAME>SR / JS4140 / 23/24</NAME>
              <BILLTYPE>Agst Ref</BILLTYPE>
              <AMOUNT>45045.00</AMOUNT>
            </BILLALLOCATIONS.LIST>
          </ALLLEDGERENTRIES.LIST>
          <ALLLEDGERENTRIES.LIST>
            <LEDGERNAME>Bank</LEDGERNAME>
            <GSTCLASS/>
            <ISDEEMEDPOSITIVE>Yes</ISDEEMEDPOSITIVE>
            <LEDGERFROMITEM>No</LEDGERFROMITEM>
            <REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>
            <ISPARTYLEDGER>Yes</ISPARTYLEDGER>
            <AMOUNT>-118789</AMOUNT>
          </ALLLEDGERENTRIES.LIST>
        </VOUCHER>
      </TALLYMESSAGE>
      </IMPORTDATA>
</BODY>
</ENVELOPE>`;

  try {
    const tallyServerUrl = "http://localhost:9000"; // Replace with your actual Tally server URL
    const tallyResponse = await axios.post(tallyServerUrl, paymentReceiptXML, {
      headers: {
        "Content-Type": "application/xml",
      },
    });

    console.log("next step33", tallyResponse.data);
    const guidArray = [];

    const createdValue = parseInt(
      tallyResponse.data.match(/<CREATED>(\d+)<\/CREATED>/)[1]
    );

    const alteredvalue = parseInt(
      tallyResponse.data.match(/<ALTERED>(\d+)<\/ALTERED>/)[1]
    );

    const exceptionsValue = parseInt(
      tallyResponse.data.match(/<EXCEPTIONS>(\d+)<\/EXCEPTIONS>/)[1]
    );
    console.log(
      "print response ,",
      createdValue,
      alteredvalue,
      exceptionsValue
    );
    if (createdValue === 1) {
      // If createdValue is 1, indicating success
      // res.status(200).json({
      //     message: 'File uploaded and created in Tally successfully',
      //     tallyData: tallyResponse.data // Send the Tally response data to the frontend
      // });
      console.log(" created export successfuly");
    } else if (exceptionsValue === 1) {
      console.log("alterd already exist");
      const guidMatch = paymentReceiptXML.match(/<GUID>(\d+)<\/GUID>/);
      // console.log("guid ", guidMatch);
      if (guidMatch) {
        const guid = guidMatch[1];
        guidArray.push(guid);
        console.log(
          `GUID ${guid} was not exported to Tally due to an exception`
        );
        res.json({ guids: guidArray });
      }
    } else if (alteredvalue === 1) {
      console.log("exceptions ===1");
    } else {
      console.log(" exception");
      res.status(200).json({
        message: "Exception",
        // Send the Tally response data to the frontend
      });
    }
  } catch (error) {
    console.error("Error handling file upload:", error);
    res.status(500).send("Internal Server Error");
  }
});

// tally_Export.post("/exporttallyForPaymentReceipts", async (req, res) => {
//   console.log("payment xml data to exportr");
//   let xmlResults = req.body.xml; // Assuming xmlResults is an array of XML strings
//   xmlResults = xmlResults.map((xml) => xml.replace(/\n/g, ""));
//   console.log("xml data payment recipt", xmlResults);

//   const tallyServerUrl = "http://localhost:9000"; // Replace with your actual Tally server URL
//   const guidArray = [];

//   try {
//     for (let i = 0; i < xmlResults.length; i++) {
//       const xmlData = xmlResults[i];

//       const tallyResponse = await axios.post(tallyServerUrl, xmlData, {
//         headers: {
//           "Content-Type": "application/xml",
//         },
//       });

//       console.log("Response from Tally:", tallyResponse.data);

//       const createdValue = parseInt(
//         tallyResponse.data.match(/<CREATED>(\d+)<\/CREATED>/)[1]
//       );

//       const alteredValue = parseInt(
//         tallyResponse.data.match(/<ALTERED>(\d+)<\/ALTERED>/)[1]
//       );

//       const exceptionsValue = parseInt(
//         tallyResponse.data.match(/<EXCEPTIONS>(\d+)<\/EXCEPTIONS>/)[1]
//       );

//       console.log(
//         "Print response:",
//         createdValue,
//         alteredValue,
//         exceptionsValue
//       );

//       if (createdValue === 1) {
//         console.log("Created successfully");
//         // Add handling logic if necessary
//       } else if (exceptionsValue === 1) {
//         console.log("Exception: Already exists");
//         const guidMatch = xmlData.match(/<GUID>(\d+)<\/GUID>/);
//         if (guidMatch) {
//           const guid = guidMatch[1];
//           guidArray.push(guid);
//           console.log(
//             `GUID ${guid} was not exported to Tally due to an exception`
//           );
//         }
//       } else if (alteredValue === 1) {
//         console.log("Exception: Altered");
//       } else {
//         console.log("Unknown exception");
//       }
//     }

//     res.status(200).json({ guids: guidArray });
//   } catch (error) {
//     console.error("Error handling file upload:", error);
//     res.status(500).send("Internal Server Error");
//   }
// });

module.exports = tally_Export;
