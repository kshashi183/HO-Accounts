const tally_Export = require("express").Router();
const axios = require('axios');
// const cors = require('cors');
// const { dbco, dbco1, dbgetData, deleteUnitData, updateUnitData } = require("../../../helpers/dbconn")
const { setupQueryMod, misQuery } = require("../../../../helpers/dbconn")
const multer = require('multer');
const storage = multer.memoryStorage(); // Store file data in memory
const upload = multer({ storage: storage });



tally_Export.get('/getInvoiceData', (req, res) => {
    const date = req.query.date
    const unit = req.query.selectedUnitName
    //  console.log("unit", unit.UnitName);
    const sql = `SELECT u.*, t.voucher_type, t.PreFix, t.LedgerName
FROM magod_hq_mis.tally_voucher_ref t
JOIN magod_hq_mis.unit_invoices_list u
ON t.inv_type = u.dc_invType
WHERE u.UnitName='${unit.UnitName}' AND u.Inv_Date = '${date}'
ORDER BY t.voucher_type, u.Inv_no;`

    setupQueryMod(sql, (err, result) => {
        // console.log("hiii");
        if (err) {
            console.log("error", err);
            return res.json({ Error: " error in sql" })
        }
        else {
            //  console.log("invoiceee",  result.LedgerName);
            return res.json({ Status: 'Success', Result: result })
        }
    })

});

tally_Export.get('/getInvoiceTaxDetails', (req, res) => {
    const dcNo = req.query.DC_Inv_No
    const unit = req.query.selectedUnitName
    // console.log("dc no", dcNo);
    const sql = `SELECT m2.*, m2.Unit_Uid AS dc_invTaxId
    FROM magod_hq_mis.unit_invoices_list m1
    JOIN magod_hq_mis.unit_inv_taxtable m2
    ON m1.DC_inv_no = m2.DC_inv_no AND m1.UnitName = m2.UnitName
    WHERE m1.UnitName = '${unit.UnitName}'  AND m1.DC_Inv_No='${dcNo}';`

    setupQueryMod(sql, (err, result) => {

        if (err) {
            console.log("error", err);
            return res.json({ Error: " error in sql" })
        }
        else {
            //console.log("invoice", result);
            return res.json({ Status: 'Success', Result: result })
        }
    })

})


tally_Export.get('/getPaymentReceipntData', (req, res) => {
    const date = req.query.date
    const unit = req.query.selectedUnitName


    const sql1 = `SELECT  DISTINCT p.*, t.voucher_type, t.PreFix, t.LedgerName
      FROM magod_hq_mis.unit_payment_recd_voucher_register p
      JOIN magod_hq_mis.unit_payment_recd_voucher_details p1 ON p1.RecdPVID = p.RecdPVID AND p1.UnitName = p.UnitName
      JOIN magod_hq_mis.tally_voucher_ref t ON t.inv_type = p1.Inv_Type
      WHERE p.Unitname = '${unit.UnitName}' AND p.Recd_PV_Date = '${date}';
      `

    setupQueryMod(sql1, (err, result) => {
        // console.log("hiii");
        if (err) {
            console.log("error", err);
            return res.json({ Error: " error in sql" })
        }
        else {
            // console.log("paymnettttt", result);
            return res.json({ Status: 'Success', Result: result })
        }
    })

})


tally_Export.get('/getPayment', (req, res) => {

    const Recd_PVNo = req.query.Recd_PVNo;
    const unit = req.query.selectedUnitName
    // console.log("recd pvno",Recd_PVNo);

    const sql = `SELECT   p1.*, t.voucher_type, t.PreFix, t.LedgerName
    FROM magod_hq_mis.unit_payment_recd_voucher_register p
    JOIN magod_hq_mis.unit_payment_recd_voucher_details p1 ON p1.RecdPVID = p.RecdPVID
    JOIN magod_hq_mis.tally_voucher_ref t ON t.inv_type = p1.Inv_Type
    WHERE p.Unitname = '${unit.UnitName}' AND p.Recd_PVNo='${Recd_PVNo}' `;


    setupQueryMod(sql, (err, result) => {

        if (err) {
            console.log("error", err);
            return res.json({ Error: " error in sql" })
        }
        else {

            // console.log("paymnet", result);
            return res.json({ Status: 'Success', Result: result })
        }
    })


})







// tally_Export.post('/exporttally', upload.single('xmlFile'), async (req, res) => {

//     try {
//        // const xmlFile = req.file.buffer.toString(); // Assuming the file is XML 
//         // console.log("xml file", xmlFile);
//     const xmlFile=`<ENVELOPE>
//     <HEADER><TALLYREQUEST>Import Data</TALLYREQUEST></HEADER>
//     <BODY>
//     <IMPORTDATA>
//     <REQUESTDESC>
//     <REPORTNAME>Vouchers</REPORTNAME>
//     <STATICVARIABLES><SVCURRENTCOMPANY>MLMPL_Jigani_2023_24</SVCURRENTCOMPANY></STATICVARIABLES>
//     </REQUESTDESC>
//     <TALLYMESSAGE xmlns:UDF='TallyUDF'>
//     <VOUCHER REMOTEID='SL2147387070' VCHTYPE='Sales' ACTION='Create'>
//     <DATE>20240222</DATE>
//     <GUID>2147387070</GUID>
//     <NARRATION>Our WO No :240492 Packing Note No :09014/ 23/24</NARRATION>
//     <VOUCHERTYPENAME>Sales</VOUCHERTYPENAME>
//     <VOUCHERNUMBER>SL / JG1133/ 23/24</VOUCHERNUMBER>
//     <REFERENCE>KE034 DTD/31.01.2024</REFERENCE>
//     <PARTYLEDGERNAME>KALPA ENGINEERING</PARTYLEDGERNAME>
//     <CSTFORMISSUETYPE />
//     <CSTFORMRECVTYPE />
//     <FBTPAYMENTTYPE>Default</FBTPAYMENTTYPE>
//     <VCHGSTCLASS />
//     <DIFFACTUALQTY>No</DIFFACTUALQTY>
//     <AUDITED>No</AUDITED>
//     <FORJOBCOSTING>No</FORJOBCOSTING>
//     <ISOPTIONAL>No</ISOPTIONAL>
//     <EFFECTIVEDATE>20240222</EFFECTIVEDATE>
//     <USEFORINTEREST>No</USEFORINTEREST>
//     <USEFORGAINLOSS>No</USEFORGAINLOSS>
//     <USEFORGODOWNTRANSFER>No</USEFORGODOWNTRANSFER>
//     <USEFORCOMPOUND>No</USEFORCOMPOUND>
//     <ALTERID>2</ALTERID>
//     <EXCISEOPENING>No</EXCISEOPENING>
//     <ISCANCELLED>No</ISCANCELLED>
//     <HASCASHFLOW>No</HASCASHFLOW>
//     <ISPOSTDATED>No</ISPOSTDATED>
//     <USETRACKINGNUMBER>No</USETRACKINGNUMBER>
//     <ISINVOICE>No</ISINVOICE>
//     <MFGJOURNAL>No</MFGJOURNAL>
//     <HASDISCOUNTS>No</HASDISCOUNTS>
//     <ASPAYSLIP>No</ASPAYSLIP>
//     <ISDELETED>No</ISDELETED>
//     <ASORIGINAL>No</ASORIGINAL>
//     <ALLLEDGERENTRIES.LIST>
//     <LEDGERNAME>KALPA ENGINEERING</LEDGERNAME>
//     <GSTCLASS />
//     <ISDEEMEDPOSITIVE>YES</ISDEEMEDPOSITIVE>
//     <LEDGERFROMITEM>No</LEDGERFROMITEM>
//     <REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>
//     <ISPARTYLEDGER>Yes</ISPARTYLEDGER>
//     <AMOUNT>-26143.00</AMOUNT>
//     <BILLALLOCATIONS.LIST>
//     <NAME>SL / JG1133/ 23/24</NAME>
//     <BILLCREDITPERIOD>30</BILLCREDITPERIOD>
//     <BILLTYPE>New Ref</BILLTYPE>
//     <AMOUNT>-26143.00</AMOUNT>
//     </BILLALLOCATIONS.LIST>
//     </ALLLEDGERENTRIES.LIST>
//     <ALLLEDGERENTRIES.LIST>
//     <LEDGERNAME>SALES</LEDGERNAME>
//     <GSTCLASS />
//     <ISDEEMEDPOSITIVE>No</ISDEEMEDPOSITIVE>
//     <LEDGERFROMITEM>No</LEDGERFROMITEM>
//     <REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>
//     <ISPARTYLEDGER>No</ISPARTYLEDGER>
//     <AMOUNT>22155.00</AMOUNT>
//     </ALLLEDGERENTRIES.LIST>
//     <ALLLEDGERENTRIES.LIST>
//     <LEDGERNAME>CGST @ 9%</LEDGERNAME>
//     <GSTCLASS />
//     <ISDEEMEDPOSITIVE>No</ISDEEMEDPOSITIVE>
//     <LEDGERFROMITEM>No</LEDGERFROMITEM>
//     <REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>
//     <ISPARTYLEDGER>No</ISPARTYLEDGER>
//     <AMOUNT>1993.95</AMOUNT>
//     </ALLLEDGERENTRIES.LIST>
//     <ALLLEDGERENTRIES.LIST>
//     <LEDGERNAME>SGST @ 9%</LEDGERNAME>
//     <GSTCLASS />
//     <ISDEEMEDPOSITIVE>No</ISDEEMEDPOSITIVE>
//     <LEDGERFROMITEM>No</LEDGERFROMITEM>
//     <REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>
//     <ISPARTYLEDGER>Yes</ISPARTYLEDGER>
//     <AMOUNT>1993.95</AMOUNT>
//     </ALLLEDGERENTRIES.LIST>
//     <ALLLEDGERENTRIES.LIST>
//     <LEDGERNAME>Round Off</LEDGERNAME>
//     <GSTCLASS />
//     <ISDEEMEDPOSITIVE>Yes</ISDEEMEDPOSITIVE>
//     <LEDGERFROMITEM>No</LEDGERFROMITEM>
//     <REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>
//     <ISPARTYLEDGER>Yes</ISPARTYLEDGER>
//     <AMOUNT>0.10</AMOUNT>
//     </ALLLEDGERENTRIES.LIST>
//     </VOUCHER>
//     </TALLYMESSAGE>
//     </IMPORTDATA>
//     </BODY>
//     </ENVELOPE>

//     `
//         const tallyServerUrl = 'http://localhost:9000'; // Replace with your actual Tally server URL
//         const tallyResponse = await axios.post(tallyServerUrl, xmlFile, {
//             headers: {
//                 'Content-Type': 'application/xml',
//             },
//         });

//         // Check the response from the Tally server
//         const tallyXmlResponse = parseXml(tallyResponse.data);
//        console.log("tally response", tallyXmlResponse);
//       if (tallyResponse.status === 200 ) {
//         // Tally server responded with a success status
//         console.log('File uploaded and sent to Tally successfully');
//         res.status(200).send('File uploaded and sent to Tally successfully');
//     }
//         else {
//             // Tally server responded with an error status
//             console.error('Error from Tally server:', tallyResponse.statusText);
//             res.status(500).send('Error communicating with Tally server');
//         }
//     } catch (error) {
//         console.error('Error handling file upload:', error);
//         res.status(500).send('Internal Server Error');
//     }

// });




const { parseString } = require('xml2js');
//tally after exporting i need to compre which ledger is not export


tally_Export.post('/exporttally', upload.single('xmlFile'), async (req, res) => {

    const tallyUrl = 'http://localhost:9000';

    // Fetch company Names

    try {
        const response = await axios.post(tallyUrl, {
            xmlRequest: '<ENVELOPE><HEADER><VERSION>1</VERSION><TALLYREQUEST>EXPORT</TALLYREQUEST><TYPE>COLLECTION</TYPE><ID>List of Ledgers</ID></HEADER><BODY><DESC><STATICVARIABLES><SVEXPORTFORMAT>$$SysName:XML</SVEXPORTFORMAT></STATICVARIABLES></DESC></BODY></ENVELOPE>'
        });
        // Process response XML here
         console.log("tally .......",response.data);
    } catch (error) {
        console.error('Error fetching ledger names:', error);
    }

    try {
        const xmlFile = `<ENVELOPE>
        <HEADER>
            <TALLYREQUEST>Import Data</TALLYREQUEST>
            </HEADER>
        <BODY>
        <IMPORTDATA>
        <REQUESTDESC>
        <REPORTNAME>Vouchers</REPORTNAME>
        <STATICVARIABLES><SVCURRENTCOMPANY>MLMPL_Jigani_2023_24</SVCURRENTCOMPANY></STATICVARIABLES>
        </REQUESTDESC>
        <TALLYMESSAGE xmlns:UDF='TallyUDF'>
        <VOUCHER REMOTEID='SL2147387061' VCHTYPE='Job Work' ACTION='Create'>
        <DATE>20240316</DATE>
        <GUID>2147387061</GUID>
        <NARRATION>Our WO No :240492 Packing Note No :09014/ 23/24</NARRATION>
        <VOUCHERTYPENAME>Job Work</VOUCHERTYPENAME>
        <VOUCHERNUMBER>SL / JG1133/ 23/24</VOUCHERNUMBER>
        <REFERENCE>KE034 DTD/31.01.2024</REFERENCE>
        <PARTYLEDGERNAME>ABCD</PARTYLEDGERNAME>
        <CSTFORMISSUETYPE />
        <CSTFORMRECVTYPE />
        <FBTPAYMENTTYPE>Default</FBTPAYMENTTYPE>
        <VCHGSTCLASS />
        <DIFFACTUALQTY>No</DIFFACTUALQTY>
        <AUDITED>No</AUDITED>
        <FORJOBCOSTING>No</FORJOBCOSTING>
        <ISOPTIONAL>No</ISOPTIONAL>
        <EFFECTIVEDATE>20240316</EFFECTIVEDATE>
        <USEFORINTEREST>No</USEFORINTEREST>
        <USEFORGAINLOSS>No</USEFORGAINLOSS>
        <USEFORGODOWNTRANSFER>No</USEFORGODOWNTRANSFER>
        <USEFORCOMPOUND>No</USEFORCOMPOUND>
        <ALTERID>2</ALTERID>
        <EXCISEOPENING>No</EXCISEOPENING>
        <ISCANCELLED>No</ISCANCELLED>
        <HASCASHFLOW>No</HASCASHFLOW>
        <ISPOSTDATED>No</ISPOSTDATED>
        <USETRACKINGNUMBER>No</USETRACKINGNUMBER>
        <ISINVOICE>No</ISINVOICE>
        <MFGJOURNAL>No</MFGJOURNAL>
        <HASDISCOUNTS>No</HASDISCOUNTS>
        <ASPAYSLIP>No</ASPAYSLIP>
        <ISDELETED>No</ISDELETED>
        <ASORIGINAL>No</ASORIGINAL>
        <ALLLEDGERENTRIES.LIST>
        <LEDGERNAME>ABCD</LEDGERNAME>
        <GSTCLASS />
        <ISDEEMEDPOSITIVE>YES</ISDEEMEDPOSITIVE>
        <LEDGERFROMITEM>No</LEDGERFROMITEM>
        <REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>
        <ISPARTYLEDGER>Yes</ISPARTYLEDGER>
        <AMOUNT>-26143.00</AMOUNT>
        <BILLALLOCATIONS.LIST>
        <NAME>SL / JG1133/ 23/24</NAME>
        <BILLCREDITPERIOD>30</BILLCREDITPERIOD>
        <BILLTYPE>New Ref</BILLTYPE>
        <AMOUNT>-26143.00</AMOUNT>
        </BILLALLOCATIONS.LIST>
        </ALLLEDGERENTRIES.LIST>
        <ALLLEDGERENTRIES.LIST>
<LEDGERNAME>CGST @ 9%</LEDGERNAME>
<GSTCLASS />
<ISDEEMEDPOSITIVE>No</ISDEEMEDPOSITIVE>
<LEDGERFROMITEM>No</LEDGERFROMITEM>
<REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>
<ISPARTYLEDGER>No</ISPARTYLEDGER>
<AMOUNT>1993.95</AMOUNT>
</ALLLEDGERENTRIES.LIST>
        <ALLLEDGERENTRIES.LIST>
        <LEDGERNAME>SALES</LEDGERNAME>
        <GSTCLASS />
        <ISDEEMEDPOSITIVE>No</ISDEEMEDPOSITIVE>
        <LEDGERFROMITEM>No</LEDGERFROMITEM>
        <REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>
        <ISPARTYLEDGER>No</ISPARTYLEDGER>
        <AMOUNT>22155.00</AMOUNT>
        </ALLLEDGERENTRIES.LIST>
        <ALLLEDGERENTRIES.LIST>
        <LEDGERNAME>SGST @ 9%</LEDGERNAME>
        <GSTCLASS />
        <ISDEEMEDPOSITIVE>No</ISDEEMEDPOSITIVE>
        <LEDGERFROMITEM>No</LEDGERFROMITEM>
        <REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>
        <ISPARTYLEDGER>Yes</ISPARTYLEDGER>
        <AMOUNT>1993.95</AMOUNT>
        </ALLLEDGERENTRIES.LIST>
        <ALLLEDGERENTRIES.LIST>
        <LEDGERNAME>Round Off</LEDGERNAME>
        <GSTCLASS />
        <ISDEEMEDPOSITIVE>Yes</ISDEEMEDPOSITIVE>
        <LEDGERFROMITEM>No</LEDGERFROMITEM>
        <REMOVEZEROENTRIES>No</REMOVEZEROENTRIES>
        <ISPARTYLEDGER>Yes</ISPARTYLEDGER>
        <AMOUNT>0.10</AMOUNT>
        </ALLLEDGERENTRIES.LIST>
        </VOUCHER>
        </TALLYMESSAGE>
        </IMPORTDATA>
        </BODY>
        </ENVELOPE>
        `// Your XML data

        const tallyServerUrl = 'http://localhost:9000'; // Replace with your actual Tally server URL
        const tallyResponse = await axios.post(tallyServerUrl, xmlFile, {
            headers: {
                'Content-Type': 'application/xml',
            },
        });



        if (tallyResponse.status === 200) {

            // Tally server responded with a success status
            console.log('tally response ', tallyResponse.data);
            res.status(200).send('File uploaded and sent to Tally successfully');
        }
        else {
            // Tally server responded with an error status
            console.error('Error from Tally server:', tallyResponse.statusText);
            res.status(500).send('Error communicating with Tally server');
        }

    } catch (error) {
        console.error('Error handling file upload:', error);
        res.status(500).send('Internal Server Error');
    }
});


module.exports = tally_Export;